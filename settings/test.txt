# Configuration file for simulating ProphetRouterWithPreP
# Based on parameters from Lee et al., Appl. Sci. 2018, 8, 2215

## Scenario settings
Scenario.name = ProphetPreP_Helsinki
Scenario.simulateConnections = true
Scenario.updateInterval = 0.1
Scenario.endTime = 216000 # From Table 1 (Simulation time (s))

## Interface-specific settings:
# pedestrian, car interface (interface1)
btInterface.type = SimpleBroadcastInterface
btInterface.transmitSpeed = 250k # 250 Kbyte/s (From Table 1)
btInterface.transmitRange = 10    # 10 m (From Table 1)

# tram interface (interface2 for trams)
highspeedInterface.type = SimpleBroadcastInterface
highspeedInterface.transmitSpeed = 250k # From Table 1 (Packet transmission speed)
highspeedInterface.transmitRange = 1000   # 1000 m (From Table 1, tram interface2)

## Node Groups Definition
Scenario.nrofHostGroups = 6 # pedestrian, car, tram x 3 types = 5? Paper says 6 groups. Assuming 3 ped/car + 3 tram? Let's follow table: 80 ped + 40 car + 6 tram = 126 nodes
# Total nodes = 80+40+6 = 126. Let's define groups accordingly.

## Group-specific settings:

# --- Pedestrians (Group 1) ---
Group1.groupID = p
Group1.nrofHosts = 80        # From Table 1 (Number of pedestrian)
Group1.router = routing.ProphetRouterWithPreP # <-- USE THE NEW ROUTER
Group1.bufferSize = 50M     # From Table 1 (Buffer size pedestrian, default 50)
Group1.movementModel = ShortestPathMapBasedMovement # From Table 1
Group1.waitTime = 0, 120    # Default from default_settings.txt, seems reasonable
Group1.speed = 0.5, 1.5     # From Table 1 (pedestrian speed)
Group1.nrofInterfaces = 1
Group1.interface1 = btInterface
Group1.msgTtl = 300         # Default 5 hours TTL

# --- Cars (Group 2) ---
Group2.groupID = c
Group2.nrofHosts = 40        # From Table 1 (Number of cars)
Group2.router = routing.ProphetRouterWithPreP # <-- USE THE NEW ROUTER
Group2.bufferSize = 50M     # From Table 1 (Buffer size car, default 50)
Group2.movementModel = ShortestPathMapBasedMovement # From Table 1
Group2.okMaps = 1           # Assuming cars use mapFile1 (roads) primarily
Group2.waitTime = 0, 120    # Default
Group2.speed = 2.7, 13.9    # From Table 1 (car speed)
Group2.nrofInterfaces = 1
Group2.interface1 = btInterface
Group2.msgTtl = 300

# --- Trams (Group 3, 4, 5 - Assuming 3 groups of 2 trams each = 6 total) ---
# Tram Group 1 (e.g., route 3)
Group3.groupID = t1 # Use distinct IDs if needed, or just 't' if routes define uniqueness
Group3.nrofHosts = 2         # Total 6 trams / 3 groups = 2 per group
Group3.router = routing.ProphetRouterWithPreP # <-- USE THE NEW ROUTER
Group3.bufferSize = 500M    # From Table 1 (Buffer size tram)
Group3.movementModel = MapRouteMovement # From Table 1
Group3.routeFile = data/tram3.wkt   # Example route file
Group3.routeType = 1                # Example route type
Group3.waitTime = 10, 30    # Default for trams
Group3.speed = 7, 10        # From Table 1 (tram speed)
Group3.nrofInterfaces = 2   # Trams have two interfaces
Group3.interface1 = btInterface      # Short range
Group3.interface2 = highspeedInterface # Long range
Group3.msgTtl = 300

# Tram Group 2 (e.g., route 4)
Group4.groupID = t2
Group4.nrofHosts = 2
Group4.router = routing.ProphetRouterWithPreP
Group4.bufferSize = 500M
Group4.movementModel = MapRouteMovement
Group4.routeFile = data/tram4.wkt   # Example route file
Group4.routeType = 2                # Example route type
Group4.waitTime = 10, 30
Group4.speed = 7, 10
Group4.nrofInterfaces = 2
Group4.interface1 = btInterface
Group4.interface2 = highspeedInterface
Group4.msgTtl = 300

# Tram Group 3 (e.g., route 10)
Group5.groupID = t3
Group5.nrofHosts = 2
Group5.router = routing.ProphetRouterWithPreP
Group5.bufferSize = 500M
Group5.movementModel = MapRouteMovement
Group5.routeFile = data/tram10.wkt  # Example route file
Group5.routeType = 2                # Example route type
Group5.waitTime = 10, 30
Group5.speed = 7, 10
Group5.nrofInterfaces = 2
Group5.interface1 = btInterface
Group5.interface2 = highspeedInterface
Group5.msgTtl = 300

# Note: Group 6 not needed if total nodes = 126 from groups 1-5

## Message creation parameters
Events.nrof = 1
Events1.class = MessageEventGenerator
Events1.interval = 25, 35   # From Table 1 (Message interval (s))
Events1.size = 500k, 1M     # From Table 1 (Message size (Bytes), U[500k-1M]) -> NOTE: Table says 500k~1M, not U[500k,1M]. Adjust if needed.
Events1.hosts = 0, 125      # Address range covering all 126 nodes (0 to 125)
Events1.prefix = M

## Movement model settings
MovementModel.rngSeed = 1 # Default seed, paper uses 5 seeds, run multiple times changing this.
MovementModel.worldSize = 4500, 3400 # From Table 1 (Area size)
MovementModel.warmup = 1000       # Default warmup

## Map based movement settings
MapBasedMovement.nrofMapFiles = 4
MapBasedMovement.mapFile1 = data/roads.wkt
MapBasedMovement.mapFile2 = data/main_roads.wkt
MapBasedMovement.mapFile3 = data/pedestrian_paths.wkt
MapBasedMovement.mapFile4 = data/shops.wkt

## Report settings
Report.nrofReports = 1
Report.warmup = 0
Report.reportDir = reports/ProphetRouterWithPreP # Set output directory
Report.report1 = MessageStatsReport             # Standard report for delivery ratio, latency, overhead

## Router specific settings for ProphetRouterWithPreP
# Namespace matching the class name
ProphetRouterWithPreP.secondsInTimeUnit = 30 # Value from default_settings, seems standard
ProphetRouterWithPreP.beta = 0.25            # From Table 1 (Î²)
# Note: P_INIT=0.75, GAMMA=0.98, DELTA=0 are hardcoded constants in ProphetRouterWithPreP
# Note: NFmax=5, Pmax=0 are not used by this Prophet implementation

## Optimization settings
Optimization.cellSizeMult = 5
Optimization.randomizeUpdateOrder = true

## GUI settings (Optional, copied from default)
GUI.UnderlayImage.fileName = data/helsinki_underlay.png
GUI.UnderlayImage.offset = 64, 20
GUI.UnderlayImage.scale = 4.75
GUI.UnderlayImage.rotate = -0.015
GUI.EventLogPanel.nrofEvents = 100